#!/usr/bin/perl -w
# Writing a combine_doc.soc file & run it
# Usage: ./combine_doc.pl doc1 doc2 doc3 output_doc
# @version 1.1
# @date: 15/05/07
# @author: HB
# @last_modified: 08/08/2007
# @2008/03/12 get register 7 into combined doc

if ($#ARGV < 2) {
	&print_usage;
	exit;
}

$output = $ARGV[$#ARGV];
$doc1 = $ARGV[0];
$doc2 = $ARGV[1];
$has_three = 0;

# Random Id
@chars = ("a" .. "z", 0 .. 9);
$rand_id = join("", @chars[map {rand @chars} (1 .. 4)]);

$soc_script = 'combine_spider_doc_'.$rand_id;


if ($#ARGV == 3) {
	$has_three = 1;
	$doc3 = $ARGV[2];
	&print_combine_doc($doc1, $doc2, $doc3, $output);
} else {
	&print_combine_doc($doc1, $doc2, $output);
}

$cmd = 'spider_linux_mpfftw_opt64 soc/spi @' . $soc_script; 
print "Running: $cmd\n";
system($cmd);
print "\nRunning \@$soc_script complete\n";

$rm_cmd = 'rm ' . $soc_script . '.soc';
print "$rm_cmd\n";
system($rm_cmd);

#################
sub print_usage {
	print "Usage:\n";
	print "    ./combine_spider_doc.pl doc1 doc2 doc3 output_doc\n";
	print "    ./combine_spider_doc.pl doc1 doc2 output_doc\n";
}

sub count_records {
	my $input = shift;
	open (HDL, "$input") || die ("Cannot open file $input. $!\n");
	my $count = 0;
	while (<HDL>) {
		chomp;
		if (/^\s*\d+/i) {
			$count++;
		}
	}
	return $count;
}

sub print_combine_doc {
	my $doc1 = shift;
	my $doc2 = shift;
	my $doc3 = '';
	my $output = '';
	
	if ($has_three) {
		$doc3 = shift;
		$output = shift;
	} else {
		$output = shift;
	}
		

	# Counting the number of particle
	my $doc1_record = &count_records($doc1);
	my $doc2_record = &count_records($doc2);
	my $doc3_record = 0;

	if ($doc1_record > 1 && $doc2_record > 1 && $doc1_record != $doc2_record) {
		print "Disagreement in number of records\n";
		exit;
	}

	my $count = $doc1_record > $doc2_record ? $doc1_record : $doc2_record;

	if ($has_three) {
		$doc3_record = &count_records($doc3);

		if ($count > 1 && $doc3_record > 1 && $count != $doc3_record) {
			print "Disagreement in number of records\n";
		}
		$count = $count > $doc3_record ? $count : $doc3_record;
	}
	
	open(OUTHDL, ">${soc_script}.soc") || die ("Error opening file $soc_script. $\!\n");
	select OUTHDL;

	# Printing combine_doc.soc content
	print <<EOF;

 ; <html><head><title>Alignment dynein/MTs</title></head><body><pre>
 ;
 ; PURPOSE: Combine several transform file
 ; SOURCE: combine_doc.soc (Generated by combine_doc.pl)
 ;
 ; \@Date: 03/09/07
 ; \@Author: HB

 ; ------------ Input files -----------------------

FR G
[doc1]$doc1

FR G
[doc2]$doc2

EOF

	if ($has_three) {
		print "FR G\n[doc3]$doc3\n\n";
	}

	print<<EOF2;

 ; ------------ Output files ----------------------

FR G
[doc]$output

 ; -------------- Create document -----------------

DOC CREATE
[doc]
1
;

 ; -------------- Combine tf ----------------------


DO LB1 x50=1,$count

EOF2

	if ($doc1_record > 1) {
		print "   UD x50,x11,x12,x13,x14,x15,x16,x37\n   [doc1]\n\n";
	} else {
		print "   UD 1,x11,x12,x13,x14,x15,x16\n   [doc1]\n\n";
	}
	
	if ($doc2_record > 1) {
		print "   UD x50,x21,x22,x23,x24,x25,x26,x37\n   [doc2]\n\n";
	} else {
		print "   UD 1,x21,x22,x23,x24,x25,x26\n   [doc2]\n\n";	
	}	
   
   if ($has_three) {
		if ($doc3_record > 1) {
			print "   UD x50,x31,x32,x33,x34,x35,x36,x37\n   [doc3]\n\n";
		} else {
			print "   UD 1,x31,x32,x33,x34,x35,x36\n   [doc3]\n\n";	
		}	
	}
 
 	print "   ; sum alignment\n";
 	print "   SA 3,x41,x42,x43,x44,x45,x46\n   x11,x12,x13\n   x14,x15,x16\n   x21,x22,x23\n   x24,x25,x26\n\n";

	if ($has_three) {
		print "   SA 3,x61,x62,x63,x64,x65,x66\n   x41,x42,x43\n   x44,x45,x46\n   x31,x32,x33\n   x34,x35,x36\n\n";
		if ($doc1_record*$doc2_record*$doc3_record > 1) {
			print "   SD x50,x61,x62,x63,x64,x65,x66,x37\n   [doc]\n\n";
		} else {
			print "   SD x50,x61,x62,x63,x64,x65,x66\n   [doc]\n\n";
		}
	} else {
		if ($doc1_record*$doc2_record > 1) {
			print "   SD x50,x41,x42,x43,x44,x45,x46,x37\n   [doc]\n\n";
		} else {
			print "   SD x50,x41,x42,x43,x44,x45,x46\n   [doc]\n\n";
		}
	}
	
	print <<EOF3;

LB1

SD E
[doc]

EN D    ; end of procedure

 ; </body></pre></html>

EOF3
# End writing

	select STDOUT;
	close OUTHDL;

	return 1
}
