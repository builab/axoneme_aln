%-------------------------------------------------------------
% TEMPLATE
% @purpose Refine the rough alignment by Constrained Rapid Motif Search without corner info
% @version 1.2
% @date 20110110 rewrite for easy
%-------------------------------------------------------------
%%% --- START HEADER ---
listFile = #s#ListFile#;
taFile = #s#TiltAngleFile#; 
refFile = #s#Reference#;
maskFile = #s#Mask#;
lowFreq = #d#RefLowPassFreq#;
hiFreq = #d#RefHighPassFreq#;
sigma = #d#Sigma#;
phiStart = #d#PhiStart#;
phiEnd = #d#PhiEnd#;
phiIncr = #d#PhiIncrement#;
thetaStart = #d#ThetaStart#;
thetaEnd = #d#ThetaEnd#;
thetaIncr = #d#ThetaIncrement#;
psiStart = #d#PsiStart#;
psiEnd = #d#PsiEnd#;
psiIncr = #d#PsiIncrement#;
binningFactor = #d#BinningFactor#;
searchRangeXY = #d#MaxRefinedXYTranslation#;
searchRangeZ = #d#MaxRefinedZTranslation#;
numOfProcessors = #d#NumberOfProcessors#;
%%% --- END HEADER -----

% ---- Program default ---------
docDir = 'doc';
graphDir = 'graph';
initDocPrefix = 'doc_init_';
inplaneDocPrefix = 'doc_rough_';
refinedDocPrefix = 'doc_refined_';
% ------------------------------

angular_range = [phiStart phiEnd phiIncr; thetaStart thetaEnd thetaIncr; psiStart psiEnd psiIncr];

disp(['List: ' listFile])
disp(['Ref: ' refFile])
disp(['Mask: ' maskFile])
disp(['Tilt Angle File: ' taFile])

[mtbList, noRecords] = parse_list(listFile);
taContent = parse_ta_list(taFile);
ref = tom_spiderread2(refFile);
ref = -ref.data; % invert contrast
ref = ref - mean(mean(mean(ref)));
ref = tom_bandpass(ref, 0, hiFreq*max(size(ref)), sigma); % set low = 0
binRef = tom_bin(ref, binningFactor-1);

mask = tom_spiderread2(maskFile);
mask = tom_bin(mask.data, binningFactor-1);

box = [-searchRangeXY searchRangeXY -searchRangeXY searchRangeXY -searchRangeZ searchRangeZ];

origin = floor(size(ref)/2) + 1;

parpool(numOfProcessors)

parfor doubletId = 1:noRecords
    docInitContent = parse_spider_doc(strcat(docDir,'/', initDocPrefix, mtbList{1}{doubletId}, '.spi'));
    euler01 = docInitContent(floor((1+size(docInitContent,1))/2), 1:3);
    docInplaneContent = parse_spider_doc(strcat(docDir,'/', inplaneDocPrefix, mtbList{1}{doubletId}, '.spi'));
    euler02 = docInplaneContent(1,1:3);
    mat01 = matrix3_from_euler(euler01);
    mat02 = matrix3_from_euler(euler02);
    mat = mat02*mat01;
    euler = euler_from_matrix3(mat);
    
    initFile = regexprep(mtbList{1}{doubletId},  '(_\d+)$', '_rough$1');
    origFile = [initFile '.spi'];
    
    outputDoc = [docDir '/' refinedDocPrefix mtbList{1}{doubletId} '.spi'];
    
    for j = 1:size(taContent,1)
        if ~isempty(strfind(mtbList{2}{doubletId}, taContent{j,1}))
            tiltInfo  = taContent{j,2};
            break;
        end
    end

    targetFile = [initFile '.spi'];
    disp(['Refining ' targetFile])
    target = tom_spiderread2(targetFile);

    % Invert contrast
    target = -target.data;
    target = target - min(min(min(target)));
	target = tom_bandpass(target, 0, hiFreq*max(size(target)), sigma);
    binTarget = tom_bin(target, binningFactor-1);

    peakList = cramos_mask(binRef, binTarget, mask, angular_range, [90 tiltInfo(2) tiltInfo(3)], euler, ceil(box/binningFactor)); 
    [sortPeak, peakIndx] = sort(peakList(:,7),'descend');
    maxPeak = peakList(peakIndx(1),:);
    
	

   maxPeak(4:6) = maxPeak(4:6)*binningFactor; % Because of binning, tranlation is double
	rotTarget = tom_rotate(target, [maxPeak(1) maxPeak(3) maxPeak(2)]);
	alnTarget = tom_shift(rotTarget, [maxPeak(5) maxPeak(4) maxPeak(6)]);

	ccc = tom_corr(alnTarget, ref, 'xcf');
	[c3d, val3d] = tom_peak2(ccc, [origin(1)-binningFactor-1 origin(1)+binningFactor+1 origin(2)-binningFactor-1 origin(2)+binningFactor+1 origin(3)-binningFactor-1 origin(3)+binningFactor+1]);
   c3d = c3d - origin;

	maxPeak(4:6) = maxPeak(4:6) + [c3d(2) c3d(1) c3d(3)];
	disp(origFile)
   disp(maxPeak)
   write_spider_doc(maxPeak, outputDoc);
end

exit;
