%%----------------------------------------------------------------------------
% Script: multiref_classification.m
% Purpose: Script to do multireference classification
% Author: Huy Bui
% Date: 20080423
% Version 1.0
%%----------------------------------------------------------------------------

%%% --- START HEADER ---
listFile =  #s#ListFile#;
taFile =  #s#TiltAngleFile#;
number_of_references = #d#NumberOfReferences#;
lowerLimit = #d#LowerLimit#; % Only add particle with CCC > this value
extractRadius = #d#ExtractedParticleRadius#;
iterationNo = #d#IterationNo#;
origAvgFile = #s#AverageFile#;

%%% --- END HEADER -----

% --- Program default --
classLowerLimit = 0.15;
starDir = 'star';
docDir =  'doc';
inputDocPrefix = 'doc_total_'; % Normally it's fixed
bndpass =  [1 12 6]; % Normally fixed
outputLogFile = 'multiref.log';
tiltAxisAngle = -90;
% --- Program default --

outputDocPrefix = ['doc_class' sprintf('%0.2d', iterationNo) '_'];

disp(['List: ' listFile])
disp(['Tilt Angle List: ' taFile]);
disp(['Input Doc. Prefix: ' inputDocPrefix]);
disp(['Output Doc. Prefix: ' outputDocPrefix]);

refFiles = {};
maskFiles = {};
for classId = 1:number_of_references
	refFiles{classId} = ['ref_' sprintf('%0.3d', classId) '.spi'];
	maskFiles{classId} = ['mask_' sprintf('%0.3d', classId) '.spi'];
end

vol_size = [extractRadius*2 extractRadius*2 extractRadius*2];

disp('Ref: ')
for classId = 1:number_of_references
	disp([' -> ' refFiles{classId}]);
end

disp('Mask: ')
for classId = 1:number_of_references
	disp([' -> ' maskFiles{classId}]);
end

[mtb_list, number_of_records] = parse_list(listFile);
taContent = parse_ta_list(taFile);

% Read reference
cRef = cell(numel(refFiles));
for i = 1:number_of_references
	ref = tom_spiderread2(refFiles{i});
	cRef{i} = fftn(ref.data); % Saving time
end

% Read mask
cMask = cell(numel(maskFiles));
for i = 1:number_of_references
	mask = tom_spiderread2(maskFiles{i});
	cMask{i} = mask.data;
end

% Create blank class output
cOutput = cell(numel(refFiles));
for i = 1:number_of_references
	cOutput{i} = zeros(size(cMask{i}));
end

% Create blank weight output
cWeight = cell(numel(refFiles));
for i = 1:number_of_references
	cWeight{i} = zeros(size(cMask{i}));
end

% Write Logfile
currDir = pwd;

fid = fopen(outputLogFile, 'at');
fprintf(fid, '---------------------\nClassification iteration %d at %s\n', iterationNo, datestr(now));
fprintf(fid, '%15s', 'DoubletId');
for classId = 0:number_of_references
	fprintf(fid, '%10s', ['Class ' num2str(classId)]);
end
fprintf(fid, '\n');

% Making a random temporary dir
rand('twister', sum(100*clock));
tmpDir = ['tmp_dir' num2str(rand(1,1))];
mkdir(tmpDir);
cd(tmpDir)

% Stats of classification
classStat = zeros(1, number_of_references+1);


for doubletId = 1:number_of_records
	% Initialize
	cParticle = cell(numel(refFiles));
	for classId = 1:number_of_references
		cParticle{classId} = zeros(vol_size);
	end
	
	starFile = ['../' starDir '/' mtb_list{2}{doubletId} '.star'];
	docInputFile = ['../' docDir '/' inputDocPrefix mtb_list{1}{doubletId} '.spi'];
	docOutputFile = ['../' docDir '/' outputDocPrefix mtb_list{1}{doubletId} '.spi'];

	disp(starFile)	
	disp(docInputFile)
	disp(docOutputFile)
	
 	docInputContent = parse_spider_doc(docInputFile);
	number_of_particles = size(docInputContent, 1);
	
	% Linking
	lnStarCmd = ['ln -s ' starFile];
	lnDocDirCmd = ['ln -s ' docInputFile];
	disp(lnStarCmd)
	disp(lnDocDirCmd)
	system(lnStarCmd);
	system(lnDocDirCmd);

	% Picking
	pick_cmd = ['bpick -extract ' num2str(extractRadius) ' -background -normalize ' starFile];
	disp(pick_cmd)
	system(pick_cmd);

	% Spliting
	split_cmd = ['bsplit -first 1 *.pif raw.spi'];
	disp(split_cmd)
	system(split_cmd);
		
	% Remove pif file
	rm_cmd = 'rm *.pif';
	disp(rm_cmd);
	system(rm_cmd);

	% Transform according to input document
	tfm_cmd = ['/mol/ish/Data/programs/perl_script/tfm_series.pl -nu raw_ 1 ' num2str(number_of_particles) ' out_ ' inputDocPrefix mtb_list{1}{doubletId} '.spi'];
	disp(tfm_cmd)
	system(tfm_cmd);

	% Clean up raw & pif file
	rm_cmd = 'rm raw_0*spi';
	disp(rm_cmd);
	system(rm_cmd);

	%% CCC calculation
	% Read tilt angle file
	for j = 1:size(taContent,1)
        	if ~isempty(strfind(mtb_list{2}{doubletId}, taContent{j,1}))
            		tilt_info  = taContent{j,2};
	        	break;
        	end
	end
	
	% Initial docOutput
	outputContent = zeros(number_of_particles, 7 + number_of_references + 1);
	outputContent(:,1:7) = docInputContent;
	

	for particleId = 1:number_of_particles
		euler = docInputContent(particleId,1:3);
		wedge = missing_wedge_3dse_arbitrary(vol_size, tiltAxisAngle, tilt_info(2), tilt_info(3), euler);

		% Read particle & mask
		particle = tom_spiderread2(['out_' sprintf('%0.3d', particleId) '.spi']);
			
		maxCorr = 0;
		for classId = 1:number_of_references
			maskedParticle = threedmask(particle.data, cMask{classId});
			mwRef = ifftn(cRef{classId}.*ifftshift(wedge), 'symmetric'); % Convolute with mw
			mwMaskedRef = threedmask(mwRef, cMask{classId});
			
			% CCC			
			corr = prcorr2(tom_bandpass(mwMaskedRef, bndpass(1),bndpass(2),bndpass(3)), tom_bandpass(maskedParticle, bndpass(1),bndpass(2),bndpass(3)));
			disp(['CCC btw ' mtb_list{1}{doubletId} ' particle ' sprintf('%0.3d', particleId) ' with Ref ' sprintf('%0.3d', classId) ': ' sprintf('%6.5f', corr)]);

			outputContent(particleId, 7 + classId + 1) = corr;
			if (corr > maxCorr)
				outputContent(particleId, 8) = classId;				
				maxCorr = corr;
			end
		end

		classId = outputContent(particleId, 8);
		if (classId > 0) && (outputContent(particleId, 7) > lowerLimit) && (outputContent(particleId, 7 + classId + 1) > classLowerLimit)			
			cParticle{classId} = cParticle{classId} +  particle.data;
			cWeight{classId} = cWeight{classId} + wedge;
		end		
		
	end

	% Write document file
	write_spider_doc(outputContent, docOutputFile);

	% Write to log file
	fprintf(fid, '%15s', mtb_list{1}{doubletId});
	for classId = 0:number_of_references
		classStat(classId+1) = classStat(classId+1) + sum(outputContent(:,8) == classId);
		fprintf(fid, '%10d', sum(outputContent(:,8) == classId));
	end
	fprintf(fid, '\n');

	% write output
	for classId = 1:number_of_references
		avgFile = [currDir '/'  mtb_list{1}{doubletId} '_c' sprintf('%0.3d', classId) '.spi'];
		cOutput{classId} = cOutput{classId} + cParticle{classId};
		disp(['Writing ' avgFile]);
		tom_spiderwrite2(avgFile, cParticle{classId});
	end

		
	% Clean up
	cleanCmd = ['rm *.*'];
	disp(cleanCmd);
	system(cleanCmd);

end

% Write to log file
fprintf(fid, '%15s', 'Total number');
for classId = 0:number_of_references
	fprintf(fid, '%10d', classStat(classId+1));
end
fprintf(fid, '\n\n');
fclose(fid);

cd(currDir);
system(['rm -R ' tmpDir]);

% Write output
for classId = 1:number_of_references
	classAvgFile = regexprep(origAvgFile, '\.spi', [sprintf('%0.2d', iterationNo) '_c' sprintf('%0.3d', classId) '.spi']);
	classAvgCorrFile = regexprep(classAvgFile, '\.spi', '_cr\.spi');
	classWeightFile = ['weight_' classAvgFile];
	disp(['Writing ' classAvgFile]);
	tom_spiderwrite2(classAvgFile, cOutput{classId});
	disp(['Writing ' classWeightFile]);
	tom_spiderwrite2(classWeightFile, cWeight{classId});
	disp(['Writing ' classAvgCorrFile]);
	calc_weighted_avg(classAvgFile, classWeightFile, classAvgCorrFile);
end

exit;

