% -------------------------------------------------
% TEMPLATE
% @purpose: Fit star file for RS from aligned IDA
% @version 1.1 
% Require geom3d 
% @update 20100916 to have more than one points shifted
%         20110112 updated
% -------------------------------------------------

%%% --- START HEADER ---
listFile = #s#ListFile#;
extensionName = #s#ExtensionName#;
shiftX= #s#OriginShiftX#;
shiftY= #s#OriginShiftY#;
shiftZ= #s#OriginShiftZ#;
%%% --- END HEADER -----

%-- Program default -------
starDir = 'star';
docDir =  'doc';
docInputPrefix = 'doc_total_';
initExDocPrefix = 'doc_init_';
%--------------------------
shiftX = regexp(shiftX, ',', 'split');
shiftY = regexp(shiftY, ',', 'split');
shiftZ = regexp(shiftZ, ',', 'split');
shiftX = cellfun(@str2num, shiftX);
shiftY = cellfun(@str2num, shiftY);
shiftZ = cellfun(@str2num, shiftZ);

originShift = [shiftX' shiftY' shiftZ'];

outputListFile = regexprep(listFile, 'ida_v1', extensionName);

if (strcmp(listFile, outputListFile) == 1)
	outputListFile = regexprep(listFile, '.txt', ['_' extensionName '.txt']);
end

numberOfPoints = numel(shiftX);

[mtbList, noRecords] = parse_list(listFile);

fid = fopen(outputListFile, 'wt');

for doubletId = 1:noRecords
	outputStarPrefix = regexprep(mtbList{2}{doubletId}, '_ida_v1_', ['_' extensionName '_']);
	outputDocPrefix = regexprep(mtbList{1}{doubletId}, '_ida_v1_(\d+)$', ['_' extensionName '_$1']);
	fprintf(fid, '%20s %20s %3d\n', outputDocPrefix, outputStarPrefix, mtbList{3}(doubletId));
	docInputFile = [docDir '/' docInputPrefix mtbList{1}{doubletId} '.spi'];
	starFile = [starDir '/' mtbList{2}{doubletId} '.star'];
	outputDocFile = [docDir '/' initExDocPrefix outputDocPrefix '.spi'];
	outputStarFile = [starDir '/' outputStarPrefix '.star'];
	disp(['Reading: ' docInputFile]);
	disp(['Reading: ' starFile]);
	transform = parse_spider_doc(docInputFile);
	origins = parse_star_file(starFile, 'origin');
	
	% Reshape
	[m, n] = size(transform);
	transform = repmat(transform, 1, numberOfPoints);
	transform = reshape(transform', 1, m*n*numberOfPoints);
	transform = reshape(transform, n, m*numberOfPoints)';
	
	[i, k] = size(origins);
	origins = repmat(origins, 1, numberOfPoints);
	origins = reshape(origins', 1, i*k*numberOfPoints);
	origins = reshape(origins, k, i*numberOfPoints)';

	% Replicate the origin shift
	originShiftArray = repmat(originShift, size(origins, 1), 1);

	xformOrigins = transform_pts(origins, transform);

	% Better fix into matrix form
	newOrigins = zeros(size(xformOrigins));
	for pointId = 1:size(xformOrigins,1)
		xformMat = rotationOz(transform(pointId,3)*pi/180)*rotationOy(transform(pointId,2)*pi/180)*rotationOz(transform(pointId,1)*pi/180);			
		xformPts = transformPoint3d(xformOrigins(pointId,:), xformMat);
		xformNewOrigins = xformPts + originShiftArray(pointId,:);
		newOrigins(pointId, :) = transformPoint3d(xformNewOrigins, inv(xformMat));
	end

	transform(:,4:6) = zeros(size(transform, 1), 3);
	disp(['Writing: ' outputStarFile]);
	write_star_file(starFile, round(newOrigins), outputStarFile);		
	disp(['Writing: ' outputDocFile]);
	write_spider_doc(transform, outputDocFile);
end

fclose(fid);
exit;
