%-------------------------------------------------------------
% TEMPLATE
% @purpose Fit Ida from original star file & aligned documents
% @version 1.5
% @date 20090506
% @v1.1: exclusionLimit to eliminate particles with low CCC to
%		be included
% @v1.2: nearest neighbor interpolation of psi
% @v1.3: bilinear interpolation of psi
% @v1.4: to kick out outlier
% @v1.5: rewrite for easy understanding
%-------------------------------------------------------------
%%% --- START HEADER ---
listFile = #s#ListFile#;
sortDim = #d#SortDim#;
pixelSize = #d#PixelSize#;
period = #d#Period#;
exclusionLimit = #d#IdaExclusionLimit#;
%%% --- END HEADER -----

% Program default ---------
starDir = 'star';
docDir =  'doc';
graphDir = 'graph';
docAlnPrefix = 'doc_total_';
initIdaDocPrefix = 'doc_init_';
tolAngle = 10;
tolDistance = 4;
var_no = 4;
%--------------------------

disp(['List File: ' listFile])
disp(['Star Dir: ' starDir])
disp(['Doc Dir: ' docDir])
disp(['Doc Aln: ' docAlnPrefix])
disp(['Pixel Size: ' num2str(pixelSize)])
disp(['Exclusion Limit: ' num2str(exclusionLimit)])

[mtb_list, number_of_records] = parse_list(listFile);
flagellaList = parse_flagella_name_from_list(mtb_list);

xLimit = 0;
yLimit = 0;
zLimit = 0;

for i = 1:numel(flagellaList)
    flagName = flagellaList{i};
    [doublet_list, sub_mtb_list] = get_doublet_list(mtb_list, number_of_records, flagName);

    for doubletId = doublet_list
        starFilePrefix = regexprep(sub_mtb_list{2}{doubletId}, 'ida_v\d_', '');
        starFile = [starDir '/' starFilePrefix '.star'];
        docFilePrefix = regexprep(sub_mtb_list{1}{doubletId}, '_ida_v\d', '');
        docFile = [docDir '/' docAlnPrefix docFilePrefix '.spi'];
        disp(['Flagella: ' flagName])
        disp(docFile)
        disp(starFile)
        origin = parse_star_file(starFile, 'origin');
        transform = parse_spider_doc(docFile);

        if xLimit < max(origin(:,1))
            xLimit = max(origin(:,1));
        end
        if yLimit < max(origin(:,2))
            yLimit = max(origin(:,2));
        end
        if zLimit < max(origin(:,3))
            zLimit = max(origin(:,3));
        end

        % Exclude low value particle
        good_origin_indx = transform(:,7) > exclusionLimit;
        origin = origin(good_origin_indx, :);
        transform = transform(good_origin_indx, :);
        origin_new = transform_pts(origin, transform);
        smoothen_origin = smoothen_line(origin_new, tolDistance);
        [oxyzi, len] = fit_mtb_line2(smoothen_origin, sortDim, tolAngle);

        plot3(oxyzi(:,1), oxyzi(:,2), oxyzi(:,3), 'b-')
        title(strrep(flagName, '_', '\_'), 'FontWeight', 'bold');
        h = text(oxyzi(1,1) + 10, oxyzi(1,2) + 10, oxyzi(1,3), num2str(doubletId));
        set(h, 'FontWeight', 'bold');
        axis equal
        view(10, 80)
        hold on
        box on

        % Picking good points on the line
        [coor, indx] = pick_good_pts(smoothen_origin, period/(var_no*pixelSize), tolDistance);

        % Find index of point on fitted line nearest to good points
        coor_vec = repmat(coor,size(oxyzi,1),1);
        distance = sqrt(sum((coor_vec-oxyzi).^2, 2));
        [val, min_indx] = min(distance);

        % Pick IDA
        doInvert = sub_mtb_list{3}(doubletId);
        pick_ind = ida_bf_pick(len, min_indx, period/pixelSize, var_no);

        % Invert variants
        if (doInvert)
            disp('Inverted');
            tmp_ind = pick_ind{2};
            pick_ind{2} = pick_ind{4};
            pick_ind{4} = tmp_ind;
        end

        for var_ind = 1:4
            selected_ind = pick_ind{var_ind};
            selected_ind = sort(selected_ind, 'ascend');
            data = oxyzi(selected_ind, :);
            outputStarFile = [starDir '/' regexprep(sub_mtb_list{2}{doubletId}, 'ida_v\d', ['ida_v' num2str(var_ind)])  '.star'];
            disp(outputStarFile)
            write_star_file(starFile, round(data), outputStarFile)
        end

        plot3(data(:,1), data(:,2), data(:,3), 'ro');
        hold on

        % Merge 4 ida index into 1 oda_indx
        oda_ind = [];
        for var_ind = 1:var_no
            oda_ind = [oda_ind ; pick_ind{var_ind} var_ind*ones(size(pick_ind{var_ind}))];
        end

        oda_origins =  oxyzi(oda_ind(:,1) , :);
        [sorted_dim, sorted_indx] = sort(oda_origins(:, sortDim), 'ascend');
        sorted_oda_origins = oda_origins(sorted_indx, :);

        rotang = mtb_init_rotang(sorted_oda_origins, sub_mtb_list{3}(doubletId));
        idaVarInd = oda_ind(sorted_indx,2);

        for var_ind = 1:var_no
            rotang_ida = rotang(find(idaVarInd == var_ind), :);
            transform_ida = zeros(size(rotang_ida, 1), 7);
            transform_ida(:,7) = ones(size(rotang_ida,1),1);
            transform_ida(:,1:3) = rotang_ida;
            number_of_particles = size(origin_new, 1);

            % Interpolate psi by nearest neighbor
            selected_ind = pick_ind{var_ind};
            selected_ind = sort(selected_ind, 'ascend');
            particle_id = 1;
            for i = selected_ind'
                data_point = oxyzi(i, :);
                dist_array = sum((repmat(data_point, number_of_particles, 1) - origin_new).^2, 2);
                [min_dis, min_ind] = min(dist_array);
                transform_ida(particle_id, 3) = transform(min_ind, 3);
                particle_id = particle_id + 1;
            end

            docInitOut =  [docDir '/' initIdaDocPrefix regexprep(docFilePrefix, '(_\d+)$',['_ida_v' num2str(var_ind) '$1.spi'])];
            disp(docInitOut)
            write_spider_doc(transform_ida, docInitOut);
        end
    end

    if xLimit < yLimit
        xLimit = yLimit;
    else
        yLimit = xLimit;
    end

    outputGraph = [graphDir '/' regexprep(flagName, '_ida_v1$', '') '_ida_fitted.tif'];
    axis([0 xLimit 0 yLimit 0 zLimit])
    set(gcf, 'PaperPositionMode', 'auto')
    print(gcf, '-r0', outputGraph, '-dtiff');
    close(gcf);
end


exit;
